kubectl describe event client-pod
kubectl describe <object type> <object name> e.g kubectl describe pod client-pod
kubectl apply -f client-pod.yml
kubectl get pods
kubectl get services
kubectl get deployments
k get nodes => gets nodes
k cluster info => gets info about the cluster
k run <pod name eg:mynginx> --image=<dockerhub image eg nginx>
kubectl create deployment mynginx --image=nginx  => tocreate a deployment instead
k get pods -o wide => gets more info for pods

to update an image version of deployment that has already been deployed to pod
kubectl set <the property we want to change> <object type>/<object name> <the container name>=<new image to use>
eg
kubectl set image deployment/client-deployment client=stephengrider/multi-client:v5

to make a terminal window to access the docker env of the minikube environment
eval $(minikube -p minikube docker-env) or run minikube docker-env first

we can get the container id that is running after we have changed the docker to the minikube's vm docker and exec into the container, however kubectl could do the same
eg
after running eval $(minikube -p minikube docker-env), grab the container id, then exec into it,
if we get the pods (kubectl get pods and take the pod name) we can kubectl exec it <pod name> sh to exec into the container

Delete a deployment
kubectl delete deployment client-deployment

####PVC => peristent volume claim

to create a secret we use commandline: kubectl create secret <type of secret: can be generic/docker-registry/tls> <secret name> --from-literal <key=value pair of the secret> 

k get services -n ingress-nginx

k get pods -n ingress-nginx


GET A URL OF A DEPLOYMENT USING MINIKUBE

minikube service <service name eg: hello-minikube> --url

for K8s Service
minikube service my-service --url
List services
minikube service list








____________KODEKLOUD_______________

k get replicationController ==> for replicationController
k get relicaset  ==> for replicaset

When update is made to replicationController or replicaset on the number of replicas use
k replace -f <replicaset file> 
or
k scale --replicas=<new specified number eg 6> -f <replicaset file>
or type-name format
k scale --replicas=6 replicaset<which is type> myreplica-set<the replica set name>

to life-edit the replicaset definition file, run
k edit replicaset<type> myreplica-set<name of my replicaset>

k get rs myreplica-set -o yaml ==> gets a k8s' version of a replicaset definition file. rs is replicaset

k get all ==> gets all available k8s objects

// Deployment
k rollout status deployment/my-deployment ==> tocheck the status of our deployment rollout

k rollout history deployment/my-deployment  ==> history of deployment rollout

When changes is made to a deployment: apply it
k apply -f <deploy file> --record => record CHANGE-CLAUSE when we check rollout history
k set image deployment/my-deploy nginx=nginx:1.8.2 ==> to change image from the terminal
